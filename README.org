* ðŸ”§ Scala-Wrench [[https://travis-ci.org/liufengyun/scala-wrench.svg?branch=master]]

Wrench is a micro test framework for developing compiler plugins for
[[https://github.com/lampepfl/dotty/][Dotty]].

It is supposed to make your life easier if

- you are a PL researcher and want to write a plugin to demonstrate
  research result
- you are a compiler hacker and want to write a solid plugin for production
  usage

** Usage

*** SBT setting

Add Wrench as a test dependency in SBT:

#+begin_src scala
        libraryDependencies += "org.xmid" %% "scala-wrench" % "0.0.2" % "test"
#+end_src

Also, set the option =fork= to =true=:

#+begin_src scala
        fork := true    // important
#+end_src

*** Writing tests

Now, you can specify the tests like the following:

#+begin_src scala
        class Tests {
            @Test def posTests = testsIn("tests/pos").shouldCompile

            @Test def negTests = testsIn("tests/neg").shouldNotCompile

            @Test def runTests = testsIn("tests/run").shouldRun

            @Test def pluginDivZeroTests = withPlugin("tests/plugins/divideZero") {
                testsIn("tests/plugins/divideZeroTests").shouldNotCompile
            }
        }
#+end_src

Here is an example test file:
[[./wrench/src/test/scala/Tests.scala][Tests.scala]]

** DSL

*** Test Cases

- =file("tests/pos/hello.scala")= ::
  Create a single file test case for the file =tests/pos/hello.scala=.
  You can optionally put a check file =hello.check= inside
  the same directory for run tests.

- =directory("tests/pos/lib")= ::

  Create a directory test case for the path =tests/pos/lib=.
  You can optionally put a check file =lib.check= inside
  the directory =tests/pos/lib= for run tests.

  The source files in the directory may be compiled in groups. The groups
  are recognized and ordered by file name endings. For example, given the
  following files in the directory:

  - =A_1.scala=
  - =B_1.scala=
  - =C_2.scala=
  - =D_2.scala=

  The files =A_1.scala= and =B_1.scala= will be compiled first, and the compiled
  class files will be used to compile =C_2.scala= and =D_2.scala=.

- =testsIn("tests/pos")= ::
  Create a list of test cases for each file or directory under =test/pos=.
  Non-Scala files are ignored. Each sub-directory will be a /directory test/,
  each Scala file will be a /file test/.

*** Assertions

- =checkCompile= ::

  Compilation of the test(s) should produce the same errors as specified in
  source code. The errors should match code line as well as the number of
  errors.

  You can annotate the source code with =// error= to indicate that a
  compilation error is expected at the line. Multiple annotations at the
  same line is supported by repeating =// error=.

- =shouldCompile= ::

  The test(s) should compile without errors.

- =shouldRun= ::
  The test(s) should compile and run without errors.
  If a check file is provided, the output of the run should be exactly
  the same as the content of the check file.

*** Plugins

- =withPlugin(paths) { ... }= ::
  First compile the plugins in =paths=,
  then enable the plugins for all compilation in the body.

- =withPluginBin(paths) { ... }= ::
  Enable precompiled plugins in =paths=
  for all compilations in the body.

** Parallelization

To run the tests sequentially, use the following =TestContext=:

:  implicit val testCtx: TestContext = new DefaultContext

The =ParallelContext= supports running the tests in parallel:

:   implicit val testCtx: TestContext = new ParallelContext


** FAQ

*** How to make the plugin available in testing

Suppose that your plugin is an SBT project, given the following setting in SBT:

#+BEGIN_SRC scala
    javaOptions in Test ++= {
      lazy val pluginJars = (Compile / packageBin / artifactPath).value

      List("-Dplugin=" + pluginJars)
    }
#+END_SRC

You can use the plugin as follows in testing:

#+BEGIN_SRC scala
withPluginBin(sys.props("plugin")) { ... }
#+END_SRC

*** How to put =tests= under the project root directory

Suppose that your plugin project is located in a sub-directory =plugin/= under
the project root directory, you can use the following code to reset
the default working directory:

#+BEGIN_SRC scala
    baseDirectory in Test := baseDirectory.value / ".."
#+END_SRC

Then you can write =testsIn("tests/pos/")= instead of =testsIn("../tests/pos/")=.

*** How to check compiler warnings

If you want to check that a /warning/ (instead of an error) should happen
at a line, enable the compiler option =-Xfatal-warning=.

#+BEGIN_SRC scala
  implicit val flags: TestFlags = Defaults.defaultOptions.and("-Xfatal-warnings")
#+END_SRC

** Credits

The code takes inspiration from the test framework for Dotty, and follows its
convention on error annotations and ending-based test groups.
